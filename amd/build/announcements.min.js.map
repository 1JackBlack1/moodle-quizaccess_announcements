{"version":3,"file":"announcements.min.js","sources":["../src/announcements.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Display announcements for the quizaccess_announcements plugin.\n *\n * @module     quizaccess_announcements/announcements\n * @copyright  Jeffrey Black\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getannouncements} from './repository';\nimport Templates from 'core/templates';\nimport ModalFactory from 'core/modal_factory';\nimport {get_string} from 'core/str';\n\n\n/**\n * Vars to store\n * @param {number} quizid id number of quiz.\n * @param {number} delay time interval between checks (ms).\n * @param {number} lastfetched the unixtimestamp for the last time announcements were checked.\n * @param {Element} anoncont container to hold announcements.\n * @param {Element} noneyet element showing no announcemnets have been made.\n * @param {object} modal the modal dialogue to show announcements in.\n */\nvar quizid;\nvar delay;\nvar lastfetched;\nvar anoncont;\nvar noneyet;\nvar modal;\n\n/**\n * Shows new announcements in a modal dialog.\n *\n * @param {string} newanons string containing text of new announcements.\n */\nconst showmodal = (newanons) => {\n    if(modal.isVisible()) {\n        Templates.appendNodeContents(modal.body, newanons, '');\n    } else {\n        Templates.replaceNodeContents(modal.body, newanons, '');\n        modal.show();\n    }\n};\n\n/**\n * Adds new announcement text. Note: scripts not evaluated.\n *\n * @param {string} newanons HTML containing new announcements.\n */\nconst addanons = (newanons) => {\n    if(!newanons){\n        return;\n    }\n    if(noneyet){\n        noneyet.remove();\n    }\n    Templates.appendNodeContents(anoncont, newanons, '');\n    showmodal(newanons);\n};\n\n/**\n * Function to poll for announcements.\n *\n */\nconst fetchannouncements = async() => {\n    var getanonp = getannouncements(quizid, lastfetched)\n    .then((newanons) => {\n        addanons(newanons.content);\n        lastfetched=newanons.lasttime;\n        return newanons;\n    }).catch((err) => {\n        window.console.error(\"Error in AJAX request\", err);\n        return err;\n    });\n    await getanonp;\n    window.setTimeout(fetchannouncements, delay);\n};\n\n/**\n * Sets up the page for displaying announcements.\n *\n * @param {number} qid id of the quiz.\n * @param {number|false} poll delay between fetching announcements or false to disable.\n * @param {number} now timestamp of last time announcements were fetched.\n * @param {string} containerid id of the container for the announcements.\n * @param {string} header html for the announcement header.\n * @param {string} toshow html for current announcements to show.\n */\nexport const init = (qid, poll, now, containerid, header, toshow) => {\n    Templates.prependNodeContents(document.getElementById('region-main'), header, '');\n    anoncont = document.getElementById(containerid);\n    if(poll && anoncont){\n        quizid = qid;\n        delay = parseInt(poll)*1000;\n        noneyet = anoncont.querySelector('[data-noannouncements]');\n        lastfetched = now;\n        get_string('popupheader', 'quizaccess_announcements')\n        .then((str) => {\n            return ModalFactory.create({\n                title: str,\n                type: ModalFactory.types.ALERT,\n                large: true\n            });\n        }).then((m) => {\n            modal = m;\n            if(toshow){\n                showmodal(toshow);\n            }\n            window.setTimeout(fetchannouncements, delay);\n            return m;\n        });\n    }\n};\n"],"names":["quizid","delay","lastfetched","anoncont","noneyet","modal","showmodal","newanons","isVisible","appendNodeContents","body","replaceNodeContents","show","addanons","remove","fetchannouncements","getanonp","then","content","lasttime","catch","err","window","console","error","setTimeout","qid","poll","now","containerid","header","toshow","prependNodeContents","document","getElementById","parseInt","querySelector","str","ModalFactory","create","title","type","types","ALERT","large","m"],"mappings":"4eAsCIA,OACAC,MACAC,YACAC,SACAC,QACAC,mMAOEC,UAAY,SAACC,UACZF,MAAMG,+BACKC,mBAAmBJ,MAAMK,KAAMH,SAAU,wBAEzCI,oBAAoBN,MAAMK,KAAMH,SAAU,IACpDF,MAAMO,SASRC,SAAW,SAACN,UACVA,WAGDH,SACCA,QAAQU,4BAEFL,mBAAmBN,SAAUI,SAAU,IACjDD,UAAUC,YAORQ,gDAAqB,4IACnBC,UAAW,gCAAiBhB,OAAQE,aACvCe,MAAK,SAACV,iBACHM,SAASN,SAASW,SAClBhB,YAAYK,SAASY,SACdZ,YACRa,OAAM,SAACC,YACNC,OAAOC,QAAQC,MAAM,wBAAyBH,KACvCA,uBAELL,gBACNM,OAAOG,WAAWV,mBAAoBd,+aAatB,SAACyB,IAAKC,KAAMC,IAAKC,YAAaC,OAAQC,2BAC5CC,oBAAoBC,SAASC,eAAe,eAAgBJ,OAAQ,IAC9E3B,SAAW8B,SAASC,eAAeL,aAChCF,MAAQxB,WACPH,OAAS0B,IACTzB,MAAuB,IAAfkC,SAASR,MACjBvB,QAAUD,SAASiC,cAAc,0BACjClC,YAAc0B,wBACH,cAAe,4BACzBX,MAAK,SAACoB,YACIC,uBAAaC,OAAO,CACvBC,MAAOH,IACPI,KAAMH,uBAAaI,MAAMC,MACzBC,OAAO,OAEZ3B,MAAK,SAAC4B,UACLxC,MAAQwC,EACLd,QACCzB,UAAUyB,QAEdT,OAAOG,WAAWV,mBAAoBd,OAC/B4C"}
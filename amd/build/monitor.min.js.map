{"version":3,"file":"monitor.min.js","sources":["../src/monitor.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Check student status for the quizaccess_announcements plugin.\n *\n * @module     quizaccess_announcements/monitor\n * @copyright  Jeffrey Black\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getstatus} from './repository';\nimport {get_string as getString} from 'core/str';\n\n/**\n * Variables to hold the quizid, the time interval to check and the container element.\n * param {number} quizid id of the quiz.\n * param {number} studentinterval polling interval for students checking announcemnets.\n * param {number} delay polling interval for checking student status.\n * param {Element} hcont container for last announcement message.\n * param {Element} tcont table which contains student status.\n * param {number} ecnt count of number of failures.\n */\nvar quizid;\nvar studentinterval;\nvar delay;\nvar hcont;\nvar tcont;\nvar ecnt;\n\n\n/**\n * Clears classes to pretify rows.\n *\n * @param {Element} row row to remove classes for.\n */\nfunction clearclasses(row) {\n    row.classList.remove('table-success');\n    row.classList.remove('table-warning');\n    row.classList.remove('table-danger');\n}\n\n/**\n * Updates the table of student data.\n *\n * @param {Element} ntbody new table body element to add row to.\n * @param {number|false} last timestamp of last time announcement was posted.\n * @returns {function} a function that can be passed a student to update.\n */\nfunction updatestudentnow(ntbody, last) {\n    /**\n     * Updates the student data.\n     *\n     * @param {object} student objcet containing details of student.\n     */\n    return function updatestudent(student) {\n        let row = tcont.querySelector('tr.u_' + student.userid);\n        if (!row) {\n            window.console.log(\"Unable to find row for student \" + student.userid);\n            return;\n        }\n        try {\n            clearclasses(row);\n            row.querySelector('td.cell.time').innerHTML = student.str;\n            row.querySelector('td.cell.ago').innerHTML = student.ago;\n            if (student.ago > studentinterval * 2) {\n                row.classList.add('table-danger');\n            } else if (student.ago > studentinterval) {\n                row.classList.add('table-warning');\n            } else if ((last !== null) && (last > student.time)) {\n                row.classList.add('table-warning');\n            } else {\n                row.classList.add('table-success');\n            }\n        } catch (e) {\n            window.console.error(\"Error updating student status\", e);\n            ecnt = 10;\n        }\n        ntbody.appendChild(row);\n    };\n}\n\n/**\n * Makes request to get status.\n *\n */\nasync function fetchstatus() {\n    var getstatusp = getstatus(quizid)\n    .then((statret) => {\n        ecnt = 0;\n        hcont.innerHTML = statret.last.str;\n        var ntbody = document.createElement('tbody');\n        statret.status.forEach(updatestudentnow(ntbody, statret.last.time));\n        var row = tcont.rows[0];\n        while (row) {\n            clearclasses(row);\n            row.querySelector('td.cell.time').innerHTML = '-';\n            row.querySelector('td.cell.ago').innerHTML = '-';\n            ntbody.appendChild(row);\n            row = tcont.rows[0];\n        }\n        tcont.replaceWith(ntbody);\n        tcont = ntbody;\n        return statret;\n    }).catch((err) => {\n        window.console.error(\"Error in AJAX request\", err);\n        ecnt++;\n        return err;\n    });\n    await getstatusp;\n    if (ecnt < 5) {\n        window.setTimeout(fetchstatus, delay);\n    } else {\n        getString('monitor_ajax_error', 'quizaccess_announcements')\n        .then((str) => {\n            hcont.innerHTML = str;\n            return str;\n        }).catch((err) => {\n            window.console.error(\"Error getting string\", err);\n            hcont.innerHTML = 'Error fetching student status. Additionally, error fetching error string.';\n        });\n    }\n}\n\n/**\n * Sets up the page for monitoring student status.\n *\n * @param {number} qid id of the quiz.\n * @param {number} checkinterval how often students should fetch announcements.\n * @param {number} interval how often to update status.\n * @param {string} lastid id of the last post status element.\n * @param {string} contid id of the container element.\n */\nfunction init(qid, checkinterval, interval, lastid, contid) {\n    quizid = qid;\n    studentinterval = parseInt(checkinterval);\n    delay = parseInt(interval) * 1000;\n    hcont = document.getElementById(lastid);\n    tcont = document.getElementById(contid);\n    ecnt = 0;\n    if (!(tcont && (tcont = tcont.querySelector('tbody')))) {\n        window.console.error(\"Unable to find table body to update.\", contid);\n        return;\n    }\n    window.setTimeout(fetchstatus, delay);\n}\n\nexport {init};\n"],"names":["quizid","studentinterval","delay","hcont","tcont","ecnt","clearclasses","row","classList","remove","fetchstatus","getstatusp","then","statret","innerHTML","last","str","ntbody","document","createElement","status","forEach","student","querySelector","userid","ago","add","time","e","window","console","error","appendChild","log","updatestudentnow","rows","replaceWith","catch","err","setTimeout","qid","checkinterval","interval","lastid","contid","parseInt","getElementById"],"mappings":";;;;;;;;IAmCIA,OACAC,gBACAC,MACAC,MACAC,MACAC,cAQKC,aAAaC,KAClBA,IAAIC,UAAUC,OAAO,iBACrBF,IAAIC,UAAUC,OAAO,iBACrBF,IAAIC,UAAUC,OAAO,+BA+CVC,kBACPC,YAAa,yBAAUX,QAC1BY,MAAMC,UACHR,KAAO,EACPF,MAAMW,UAAYD,QAAQE,KAAKC,QAC3BC,OAASC,SAASC,cAAc,SACpCN,QAAQO,OAAOC,iBA3CGJ,OAAQF,aAMvB,SAAuBO,aACtBf,IAAMH,MAAMmB,cAAc,QAAUD,QAAQE,WAC3CjB,SAKDD,aAAaC,KACbA,IAAIgB,cAAc,gBAAgBT,UAAYQ,QAAQN,IACtDT,IAAIgB,cAAc,eAAeT,UAAYQ,QAAQG,IACjDH,QAAQG,IAAwB,EAAlBxB,gBACdM,IAAIC,UAAUkB,IAAI,gBACXJ,QAAQG,IAAMxB,iBAEJ,OAATc,MAAmBA,KAAOO,QAAQK,KAD1CpB,IAAIC,UAAUkB,IAAI,iBAIlBnB,IAAIC,UAAUkB,IAAI,iBAExB,MAAOE,GACLC,OAAOC,QAAQC,MAAM,gCAAiCH,GACtDvB,KAAO,GAEXY,OAAOe,YAAYzB,UApBfsB,OAAOC,QAAQG,IAAI,kCAAoCX,QAAQE,SAkC5CU,CAAiBjB,OAAQJ,QAAQE,KAAKY,eACzDpB,IAAMH,MAAM+B,KAAK,GACd5B,KACHD,aAAaC,KACbA,IAAIgB,cAAc,gBAAgBT,UAAY,IAC9CP,IAAIgB,cAAc,eAAeT,UAAY,IAC7CG,OAAOe,YAAYzB,KACnBA,IAAMH,MAAM+B,KAAK,UAErB/B,MAAMgC,YAAYnB,QAClBb,MAAQa,OACDJ,WACRwB,OAAOC,MACNT,OAAOC,QAAQC,MAAM,wBAAyBO,KAC9CjC,OACOiC,aAEL3B,WACFN,KAAO,EACPwB,OAAOU,WAAW7B,YAAaR,2BAErB,qBAAsB,4BAC/BU,MAAMI,MACHb,MAAMW,UAAYE,IACXA,OACRqB,OAAOC,MACNT,OAAOC,QAAQC,MAAM,uBAAwBO,KAC7CnC,MAAMW,UAAY,8JAchB0B,IAAKC,cAAeC,SAAUC,OAAQC,WAChD5C,OAASwC,IACTvC,gBAAkB4C,SAASJ,eAC3BvC,MAA6B,IAArB2C,SAASH,UACjBvC,MAAQe,SAAS4B,eAAeH,QAChCvC,MAAQc,SAAS4B,eAAeF,QAChCvC,KAAO,IACDD,QAAUA,MAAQA,MAAMmB,cAAc,uBACxCM,OAAOC,QAAQC,MAAM,uCAAwCa,QAGjEf,OAAOU,WAAW7B,YAAaR"}